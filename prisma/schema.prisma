// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  events         Event[]            @relation("owner")
  participations EventParticipant[]
  questions      Question[]
  upvotes        QuestionUpVote[]
  pollVotes      PollVote[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Event {
  id               String             @id @default(cuid()) @map("_id")
  displayName      String             @db.VarChar(100)
  slug             String             @db.VarChar(255)
  shortDescription String?            @db.VarChar(255)
  createdAt        DateTime           @default(now())
  participants     EventParticipant[]
  questions        Question[]
  polls            Poll[]

  owner   User   @relation("owner", fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId String

  @@unique([slug, ownerId]) // an Event is uniquely identified by the ownerId and the event slug
  @@index([slug, ownerId])
}

model EventParticipant {
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  eventId String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  @@id([eventId, userId])
}

model Question {
  id            String           @id @default(cuid())
  createdAt     DateTime         @default(now())
  body          String           @db.VarChar(2500)
  isPinned      Boolean          @default(false)
  isResolved    Boolean          @default(false)
  upvotes       QuestionUpVote[]

  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  eventId String

  author   User   @relation(fields: [authorId], references: [id])
  authorId String
}

model QuestionUpVote {
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  questionId String

  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId String

  @@id([authorId, questionId])
}

model Poll {
  id            String         @id @default(cuid())
  createdAt     DateTime       @default(now())
  body          String         @db.VarChar(500)
  isLive        Boolean        @default(true)
  options       PollOption[]
  votes         PollVote[]

  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  eventId String
}

model PollOption {
  id    String     @id @default(cuid())
  index Int
  body  String     @db.VarChar(100)
  votes PollVote[]

  poll   Poll   @relation(fields: [pollId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  pollId String

  @@unique([pollId, index])
  @@index([pollId, index])
}

model PollVote {
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId String

  pollOption   PollOption @relation(fields: [pollOptionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  pollOptionId String

  poll   Poll   @relation(fields: [pollId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  pollId String

  @@id([authorId, pollId]) // an user can only vote a single poll option
}